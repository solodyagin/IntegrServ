{
  "openapi": "3.0.0",
  "info": {
    "title": "Gate Integration Server",
    "description": "Gate Integration Server API",
    "contact": {
      "email": "admin@tenrok.ru"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:9080/api/v1/",
      "description": "Gate IntegrServ on localhost"
    }
  ],
  "security": [
    {
      "basicAuth": []
    }
  ],
  "tags": [
    {
      "name": "group",
      "description": "Operations about group"
    },
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],
  "paths": {
    "/group": {
      "get": {
        "tags": [
          "group"
        ],
        "summary": "Searches group",
        "description": "By passing in the appropriate options, you can search for\navailable group in the system\n",
        "operationId": "searchGroup",
        "parameters": [
          {
            "name": "searchString",
            "in": "query",
            "description": "pass an optional search string for looking up group",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "number of records to skip for pagination",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "maximum number of records to return",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 50,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      },
      "post": {
        "tags": [
          "group"
        ],
        "summary": "Create group",
        "operationId": "createGroup",
        "requestBody": {
          "description": "Created group object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Group"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "group created"
          },
          "400": {
            "description": "invalid input, object invalid"
          },
          "409": {
            "description": "an existing group already exists"
          }
        }
      }
    },
    "/group/{groupId}": {
      "get": {
        "tags": [
          "group"
        ],
        "summary": "Find group by ID",
        "operationId": "getGroupById",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "ID of group to return",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "400": {
            "description": "Invalid group supplied",
            "content": {}
          },
          "404": {
            "description": "Group not found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "group"
        ],
        "summary": "Updated group",
        "operationId": "updateGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "ID that need to be updated",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated group object",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Group"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid group supplied",
            "content": {}
          },
          "404": {
            "description": "Group not found",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "group"
        ],
        "summary": "Deletes a group",
        "operationId": "deleteGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group id to delete",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Group not found",
            "content": {}
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Searches user",
        "description": "By passing in the appropriate options, you can search for\navailable user in the system\n",
        "operationId": "searchUser",
        "parameters": [
          {
            "name": "searchString",
            "in": "query",
            "description": "pass an optional search string for looking up user",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "number of records to skip for pagination",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "maximum number of records to return",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 50,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "operationId": "createUser",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "user created"
          },
          "400": {
            "description": "invalid input, object invalid"
          },
          "409": {
            "description": "an existing user already exists"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Group": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "number": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "fatherName": {
            "type": "string"
          },
          "groupId": {
            "type": "integer",
            "description": "Group identifier",
            "format": "int64"
          }
        },
        "xml": {
          "name": "User"
        }
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}